// Mocks generated by Mockito 5.4.2 from annotations
// in todo_clean_architecture/test/features/todo/Data/repository/task_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_clean_architecture/core/error/failure.dart' as _i6;
import 'package:todo_clean_architecture/core/playform/network_info.dart' as _i9;
import 'package:todo_clean_architecture/features/todo/Data/dataSources/tasks_local_datasource.dart'
    as _i7;
import 'package:todo_clean_architecture/features/todo/Data/dataSources/tasks_remote_datasource.dart'
    as _i8;
import 'package:todo_clean_architecture/features/todo/Data/repositoryImpl/tasks_repository_impl.dart'
    as _i4;
import 'package:todo_clean_architecture/features/todo/Domain/entities/task.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTasks_1 extends _i1.SmartFake implements _i3.Tasks {
  _FakeTasks_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TasksRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockTasksRepositoryImpl extends _i1.Mock
    implements _i4.TasksRepositoryImpl {
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i3.Tasks>> createTasks(_i3.Tasks? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTasks,
          [task],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i3.Tasks>>.value(
            _FakeEither_0<_i6.Failure, _i3.Tasks>(
          this,
          Invocation.method(
            #createTasks,
            [task],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, _i3.Tasks>>.value(
                _FakeEither_0<_i6.Failure, _i3.Tasks>(
          this,
          Invocation.method(
            #createTasks,
            [task],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i3.Tasks>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i3.Tasks>> deleteTasks(String? taskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTasks,
          [taskId],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i3.Tasks>>.value(
            _FakeEither_0<_i6.Failure, _i3.Tasks>(
          this,
          Invocation.method(
            #deleteTasks,
            [taskId],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, _i3.Tasks>>.value(
                _FakeEither_0<_i6.Failure, _i3.Tasks>(
          this,
          Invocation.method(
            #deleteTasks,
            [taskId],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i3.Tasks>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tasks>>> getAllTasks() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tasks>>>.value(
            _FakeEither_0<_i6.Failure, List<_i3.Tasks>>(
          this,
          Invocation.method(
            #getAllTasks,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tasks>>>.value(
                _FakeEither_0<_i6.Failure, List<_i3.Tasks>>(
          this,
          Invocation.method(
            #getAllTasks,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, List<_i3.Tasks>>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i3.Tasks>> getOneTask(String? taskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOneTask,
          [taskId],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i3.Tasks>>.value(
            _FakeEither_0<_i6.Failure, _i3.Tasks>(
          this,
          Invocation.method(
            #getOneTask,
            [taskId],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, _i3.Tasks>>.value(
                _FakeEither_0<_i6.Failure, _i3.Tasks>(
          this,
          Invocation.method(
            #getOneTask,
            [taskId],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i3.Tasks>>);
  @override
  _i5.Future<_i2.Either<_i6.Failure, _i3.Tasks>> updateTasks(String? taskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTasks,
          [taskId],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i3.Tasks>>.value(
            _FakeEither_0<_i6.Failure, _i3.Tasks>(
          this,
          Invocation.method(
            #updateTasks,
            [taskId],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, _i3.Tasks>>.value(
                _FakeEither_0<_i6.Failure, _i3.Tasks>(
          this,
          Invocation.method(
            #updateTasks,
            [taskId],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i3.Tasks>>);
}

/// A class which mocks [TasksLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTasksLocalDataSource extends _i1.Mock
    implements _i7.TasksLocalDataSource {
  @override
  _i5.Future<List<_i3.Tasks>> getAllTask() => (super.noSuchMethod(
        Invocation.method(
          #getAllTask,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Tasks>>.value(<_i3.Tasks>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i3.Tasks>>.value(<_i3.Tasks>[]),
      ) as _i5.Future<List<_i3.Tasks>>);
  @override
  _i5.Future<void> cacheCurrentTodoList(List<_i3.Tasks>? todoListToCache) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheCurrentTodoList,
          [todoListToCache],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [TaskRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRemoteDataSource extends _i1.Mock
    implements _i8.TaskRemoteDataSource {
  @override
  _i5.Future<List<_i3.Tasks>> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Tasks>>.value(<_i3.Tasks>[]),
        returnValueForMissingStub:
            _i5.Future<List<_i3.Tasks>>.value(<_i3.Tasks>[]),
      ) as _i5.Future<List<_i3.Tasks>>);
  @override
  _i5.Future<_i3.Tasks> getOneTask(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #getOneTask,
          [taskId],
        ),
        returnValue: _i5.Future<_i3.Tasks>.value(_FakeTasks_1(
          this,
          Invocation.method(
            #getOneTask,
            [taskId],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i3.Tasks>.value(_FakeTasks_1(
          this,
          Invocation.method(
            #getOneTask,
            [taskId],
          ),
        )),
      ) as _i5.Future<_i3.Tasks>);
  @override
  _i5.Future<_i3.Tasks> createTasks(_i3.Tasks? task) => (super.noSuchMethod(
        Invocation.method(
          #createTasks,
          [task],
        ),
        returnValue: _i5.Future<_i3.Tasks>.value(_FakeTasks_1(
          this,
          Invocation.method(
            #createTasks,
            [task],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i3.Tasks>.value(_FakeTasks_1(
          this,
          Invocation.method(
            #createTasks,
            [task],
          ),
        )),
      ) as _i5.Future<_i3.Tasks>);
  @override
  _i5.Future<_i3.Tasks> deleteTasks(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTasks,
          [taskId],
        ),
        returnValue: _i5.Future<_i3.Tasks>.value(_FakeTasks_1(
          this,
          Invocation.method(
            #deleteTasks,
            [taskId],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i3.Tasks>.value(_FakeTasks_1(
          this,
          Invocation.method(
            #deleteTasks,
            [taskId],
          ),
        )),
      ) as _i5.Future<_i3.Tasks>);
  @override
  _i5.Future<_i3.Tasks> updateTasks(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #updateTasks,
          [taskId],
        ),
        returnValue: _i5.Future<_i3.Tasks>.value(_FakeTasks_1(
          this,
          Invocation.method(
            #updateTasks,
            [taskId],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i3.Tasks>.value(_FakeTasks_1(
          this,
          Invocation.method(
            #updateTasks,
            [taskId],
          ),
        )),
      ) as _i5.Future<_i3.Tasks>);
}

/// A class which mocks [Network].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetwork extends _i1.Mock implements _i9.Network {
  @override
  _i5.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}
