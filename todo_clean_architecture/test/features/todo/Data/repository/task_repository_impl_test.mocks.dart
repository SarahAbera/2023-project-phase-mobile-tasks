// Mocks generated by Mockito 5.4.2 from annotations
// in todo_clean_architecture/test/features/todo/Data/repository/task_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:dartz/dartz.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_clean_architecture/core/error/failure.dart' as _i9;
import 'package:todo_clean_architecture/core/Network/network_info.dart' as _i4;
import 'package:todo_clean_architecture/features/todo/Data/dataSources/tasks_local_datasource.dart'
    as _i3;
import 'package:todo_clean_architecture/features/todo/Data/dataSources/tasks_remote_datasource.dart'
    as _i2;
import 'package:todo_clean_architecture/features/todo/Data/models/task_model.dart'
    as _i10;
import 'package:todo_clean_architecture/features/todo/Data/repositoryImpl/tasks_repository_impl.dart'
    as _i7;
import 'package:todo_clean_architecture/features/todo/Domain/entities/task.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskRemoteDataSource_0 extends _i1.SmartFake
    implements _i2.TaskRemoteDataSource {
  _FakeTaskRemoteDataSource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTasksLocalDataSource_1 extends _i1.SmartFake
    implements _i3.TasksLocalDataSource {
  _FakeTasksLocalDataSource_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetwork_2 extends _i1.SmartFake implements _i4.Network {
  _FakeNetwork_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_3<L, R> extends _i1.SmartFake implements _i5.Either<L, R> {
  _FakeEither_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTasks_4 extends _i1.SmartFake implements _i6.Tasks {
  _FakeTasks_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TasksRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockTasksRepositoryImpl extends _i1.Mock
    implements _i7.TasksRepositoryImpl {
  @override
  _i2.TaskRemoteDataSource get remoteDataSource => (super.noSuchMethod(
        Invocation.getter(#remoteDataSource),
        returnValue: _FakeTaskRemoteDataSource_0(
          this,
          Invocation.getter(#remoteDataSource),
        ),
        returnValueForMissingStub: _FakeTaskRemoteDataSource_0(
          this,
          Invocation.getter(#remoteDataSource),
        ),
      ) as _i2.TaskRemoteDataSource);
  @override
  _i3.TasksLocalDataSource get localDataSource => (super.noSuchMethod(
        Invocation.getter(#localDataSource),
        returnValue: _FakeTasksLocalDataSource_1(
          this,
          Invocation.getter(#localDataSource),
        ),
        returnValueForMissingStub: _FakeTasksLocalDataSource_1(
          this,
          Invocation.getter(#localDataSource),
        ),
      ) as _i3.TasksLocalDataSource);
  @override
  _i4.Network get network => (super.noSuchMethod(
        Invocation.getter(#network),
        returnValue: _FakeNetwork_2(
          this,
          Invocation.getter(#network),
        ),
        returnValueForMissingStub: _FakeNetwork_2(
          this,
          Invocation.getter(#network),
        ),
      ) as _i4.Network);
  @override
  _i8.Future<_i5.Either<_i9.Failure, _i6.Tasks>> createTasks(_i6.Tasks? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTasks,
          [task],
        ),
        returnValue: _i8.Future<_i5.Either<_i9.Failure, _i6.Tasks>>.value(
            _FakeEither_3<_i9.Failure, _i6.Tasks>(
          this,
          Invocation.method(
            #createTasks,
            [task],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.Either<_i9.Failure, _i6.Tasks>>.value(
                _FakeEither_3<_i9.Failure, _i6.Tasks>(
          this,
          Invocation.method(
            #createTasks,
            [task],
          ),
        )),
      ) as _i8.Future<_i5.Either<_i9.Failure, _i6.Tasks>>);
  @override
  _i8.Future<_i5.Either<_i9.Failure, _i6.Tasks>> deleteTasks(String? taskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTasks,
          [taskId],
        ),
        returnValue: _i8.Future<_i5.Either<_i9.Failure, _i6.Tasks>>.value(
            _FakeEither_3<_i9.Failure, _i6.Tasks>(
          this,
          Invocation.method(
            #deleteTasks,
            [taskId],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.Either<_i9.Failure, _i6.Tasks>>.value(
                _FakeEither_3<_i9.Failure, _i6.Tasks>(
          this,
          Invocation.method(
            #deleteTasks,
            [taskId],
          ),
        )),
      ) as _i8.Future<_i5.Either<_i9.Failure, _i6.Tasks>>);
  @override
  _i8.Future<_i5.Either<_i9.Failure, List<_i6.Tasks>>> getAllTasks() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i8.Future<_i5.Either<_i9.Failure, List<_i6.Tasks>>>.value(
            _FakeEither_3<_i9.Failure, List<_i6.Tasks>>(
          this,
          Invocation.method(
            #getAllTasks,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.Either<_i9.Failure, List<_i6.Tasks>>>.value(
                _FakeEither_3<_i9.Failure, List<_i6.Tasks>>(
          this,
          Invocation.method(
            #getAllTasks,
            [],
          ),
        )),
      ) as _i8.Future<_i5.Either<_i9.Failure, List<_i6.Tasks>>>);
  @override
  _i8.Future<_i5.Either<_i9.Failure, _i6.Tasks>> getOneTask(String? taskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOneTask,
          [taskId],
        ),
        returnValue: _i8.Future<_i5.Either<_i9.Failure, _i6.Tasks>>.value(
            _FakeEither_3<_i9.Failure, _i6.Tasks>(
          this,
          Invocation.method(
            #getOneTask,
            [taskId],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.Either<_i9.Failure, _i6.Tasks>>.value(
                _FakeEither_3<_i9.Failure, _i6.Tasks>(
          this,
          Invocation.method(
            #getOneTask,
            [taskId],
          ),
        )),
      ) as _i8.Future<_i5.Either<_i9.Failure, _i6.Tasks>>);
  @override
  _i8.Future<_i5.Either<_i9.Failure, _i6.Tasks>> updateTasks(
          _i10.TaskModel? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTasks,
          [todo],
        ),
        returnValue: _i8.Future<_i5.Either<_i9.Failure, _i6.Tasks>>.value(
            _FakeEither_3<_i9.Failure, _i6.Tasks>(
          this,
          Invocation.method(
            #updateTasks,
            [todo],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i5.Either<_i9.Failure, _i6.Tasks>>.value(
                _FakeEither_3<_i9.Failure, _i6.Tasks>(
          this,
          Invocation.method(
            #updateTasks,
            [todo],
          ),
        )),
      ) as _i8.Future<_i5.Either<_i9.Failure, _i6.Tasks>>);
}

/// A class which mocks [TasksLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTasksLocalDataSource extends _i1.Mock
    implements _i3.TasksLocalDataSource {
  @override
  _i8.Future<List<_i6.Tasks>> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i8.Future<List<_i6.Tasks>>.value(<_i6.Tasks>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i6.Tasks>>.value(<_i6.Tasks>[]),
      ) as _i8.Future<List<_i6.Tasks>>);
  @override
  _i8.Future<void> cacheCurrentTodoList(List<_i6.Tasks>? todoListToCache) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheCurrentTodoList,
          [todoListToCache],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [TaskRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRemoteDataSource extends _i1.Mock
    implements _i2.TaskRemoteDataSource {
  @override
  _i8.Future<List<_i6.Tasks>> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i8.Future<List<_i6.Tasks>>.value(<_i6.Tasks>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i6.Tasks>>.value(<_i6.Tasks>[]),
      ) as _i8.Future<List<_i6.Tasks>>);
  @override
  _i8.Future<_i6.Tasks> getOneTask(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #getOneTask,
          [taskId],
        ),
        returnValue: _i8.Future<_i6.Tasks>.value(_FakeTasks_4(
          this,
          Invocation.method(
            #getOneTask,
            [taskId],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i6.Tasks>.value(_FakeTasks_4(
          this,
          Invocation.method(
            #getOneTask,
            [taskId],
          ),
        )),
      ) as _i8.Future<_i6.Tasks>);
  @override
  _i8.Future<_i6.Tasks> createTasks(_i6.Tasks? task) => (super.noSuchMethod(
        Invocation.method(
          #createTasks,
          [task],
        ),
        returnValue: _i8.Future<_i6.Tasks>.value(_FakeTasks_4(
          this,
          Invocation.method(
            #createTasks,
            [task],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i6.Tasks>.value(_FakeTasks_4(
          this,
          Invocation.method(
            #createTasks,
            [task],
          ),
        )),
      ) as _i8.Future<_i6.Tasks>);
  @override
  _i8.Future<_i6.Tasks> deleteTasks(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTasks,
          [taskId],
        ),
        returnValue: _i8.Future<_i6.Tasks>.value(_FakeTasks_4(
          this,
          Invocation.method(
            #deleteTasks,
            [taskId],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i6.Tasks>.value(_FakeTasks_4(
          this,
          Invocation.method(
            #deleteTasks,
            [taskId],
          ),
        )),
      ) as _i8.Future<_i6.Tasks>);
  @override
  _i8.Future<_i6.Tasks> updateTasks(_i10.TaskModel? todo) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTasks,
          [todo],
        ),
        returnValue: _i8.Future<_i6.Tasks>.value(_FakeTasks_4(
          this,
          Invocation.method(
            #updateTasks,
            [todo],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i6.Tasks>.value(_FakeTasks_4(
          this,
          Invocation.method(
            #updateTasks,
            [todo],
          ),
        )),
      ) as _i8.Future<_i6.Tasks>);
}

/// A class which mocks [Network].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetwork extends _i1.Mock implements _i4.Network {
  @override
  _i8.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
}
