// Mocks generated by Mockito 5.4.2 from annotations
// in todo_clean_architecture/test/features/task/Domain/usecases/get_one_task_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_clean_architecture/core/error/failure.dart' as _i5;
import 'package:todo_clean_architecture/features/task/Domain/entities/task.dart'
    as _i6;
import 'package:todo_clean_architecture/features/task/Domain/repositories/task_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TasksRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTasksRepository extends _i1.Mock implements _i3.TasksRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Tasks>>> getAllTasks() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Tasks>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Tasks>>(
          this,
          Invocation.method(
            #getAllTasks,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Tasks>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Tasks>>(
          this,
          Invocation.method(
            #getAllTasks,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Tasks>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Tasks>> getOneTask(String? taskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOneTask,
          [taskId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Tasks>>.value(
            _FakeEither_0<_i5.Failure, _i6.Tasks>(
          this,
          Invocation.method(
            #getOneTask,
            [taskId],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Tasks>>.value(
                _FakeEither_0<_i5.Failure, _i6.Tasks>(
          this,
          Invocation.method(
            #getOneTask,
            [taskId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Tasks>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Tasks>> createTasks(_i6.Tasks? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTasks,
          [task],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Tasks>>.value(
            _FakeEither_0<_i5.Failure, _i6.Tasks>(
          this,
          Invocation.method(
            #createTasks,
            [task],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Tasks>>.value(
                _FakeEither_0<_i5.Failure, _i6.Tasks>(
          this,
          Invocation.method(
            #createTasks,
            [task],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Tasks>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Tasks>> deleteTasks(String? taskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTasks,
          [taskId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Tasks>>.value(
            _FakeEither_0<_i5.Failure, _i6.Tasks>(
          this,
          Invocation.method(
            #deleteTasks,
            [taskId],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Tasks>>.value(
                _FakeEither_0<_i5.Failure, _i6.Tasks>(
          this,
          Invocation.method(
            #deleteTasks,
            [taskId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Tasks>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Tasks>> updateTasks(String? taskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTasks,
          [taskId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Tasks>>.value(
            _FakeEither_0<_i5.Failure, _i6.Tasks>(
          this,
          Invocation.method(
            #updateTasks,
            [taskId],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Tasks>>.value(
                _FakeEither_0<_i5.Failure, _i6.Tasks>(
          this,
          Invocation.method(
            #updateTasks,
            [taskId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Tasks>>);
}
